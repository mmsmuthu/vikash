#include<iostream>
 using namespace std;
 
 class Complexz{
     private:
        int a, b;
        
    public:
        Complexz(int x=0, int y=0){
            a=x;
            b=y;
        }
        
        Complexz operator + (Complexz const &obj){
            Complexz obj1;
            
            obj1.a = a + obj.a;
            obj1.b = b + obj.b;
            
            return obj1;
        }
        void print(){
            cout<< " a = "<<a <<" b = " <<b <<endl;
        }
        
 };
 
 int main(){
     
     Complexz a1(1, 1);
     Complexz a2(2, 2);
     Complexz a3 = a1+a2;
     a3.print();
     
     
 }
 
 // Another example of operator overloading :-
 
 #include<iostream>

 using namespace std;
 
 class TestOperator{
     private:
        int a, b;
        
    public:
        TestOperator(int x=0, int y=0){
            a=x;
            b=y;
        }
    void print(){
        cout <<"a = "<<a <<"b = "<<b<<endl;
    }
    friend TestOperator operator + (TestOperator const & , TestOperator const &);
        
 };
 
 TestOperator operator + (TestOperator const &obj1, TestOperator const &obj2){
     return TestOperator(obj1.a+obj2.a, obj1.b+obj2.b);
 }
 
 int main(){
     TestOperator obj1(1,2);
     TestOperator obj2(2,3);
     TestOperator obj3=obj1+obj2;
     obj3.print();  
 }
 
