#include<iostream>
#include<conio.h>
#include<string>
#include<fstream>
#include<vector>
#include<map>
#include "Header4.h";

using namespace std;

int ITK_user_main(int argc,char* argv[])
{
	int iStatus = ITK_ok;

	ifstream fInputFile;
	string line="";
	string errorLog = "";

	char  *user_id      	            = NULL,
	      *user_pwd    		            = NULL,
		  *user_grp    		            = NULL;

	string inputFilePath = "";
	/*------DISPLAY HELP--------*/
	 if ( ITK_ask_cli_argument("-help") || ITK_ask_cli_argument("-h") )
    {
        //display_help();
        return iStatus;
    }

	 user_id    = ITK_ask_cli_argument("-u=");
     user_pwd   = ITK_ask_cli_argument("-p=");
	 user_grp   = ITK_ask_cli_argument("-g=");
	 inputFilePath	= ITK_ask_cli_argument("-f=");

	 //_getch();
	
	 if((user_id != NULL) && (user_pwd != NULL) && (!inputFilePath.empty()))
	{
		iStatus=ITK_init_module(user_id,user_pwd,user_grp);
		if(iStatus==ITK_ok)
		{
			
			std::vector<string> splitVecStr;
			try{
				fInputFile.open(inputFilePath);
				std::map<string,string> tcQueryMap;
				line = "";
				while(getline(fInputFile,line))
				{
					splitVecStr.clear();
					tcQueryMap.clear();

					if(!line.empty())
					{
						if(line.find("|") != std::string::npos)
						{
							splitVecStr = splitString(line,"|",false);
						}
						else
						{
							errorLog = "Line doesnt contain Parent child spliter '|' ";
						}

						if(splitVecStr.size() == 5)
						{
							string parentItem = splitVecStr[0];
							string childItem =  splitVecStr[1];
							string childAttr   =  splitVecStr[2];
							string datasetItem =  splitVecStr[3];
							string datasetItem1= splitVecStr[4];
							tag_t parentItemTag = NULLTAG;
							tag_t parentRevTag = NULLTAG;
							tag_t childItemTag = NULLTAG;
							tag_t childRevTag = NULLTAG;
							tag_t* status=NULLTAG;
							int iCount	= 0,
								status_count=0;

							tag_t *mdtTag = NULLTAG;
							tag_t process_template = NULLTAG,
									  process = NULLTAG;
									  
								int attachTypes = EPM_target_attachment;

							/*parent Item*/
							std::vector<string> parentLine = splitString(parentItem,"~",false);
						
							/*Search parent Item*/
							/*QUERY MAP TO FIND 'Parent Item ID' */
							tcQueryMap.insert(::make_pair((string)ITEM_ID,(string)parentLine[0]));
							tcQueryMap.insert(::make_pair((string)OBJECT_TYPE,(string)parentLine[1]));
				
							iStatus = find_execute_qry(QUERYITEM,tcQueryMap,&iCount,&mdtTag);

							if(iCount > 0 )
							{
									parentItemTag = mdtTag[0];
									iStatus = ITEM_ask_latest_rev(parentItemTag,&parentRevTag);
							}
							else 
							{
								char* pcAttrName[] = {"item_id","object_desc"};
								char** pcAttrValue = NULL;


								
								pcAttrValue = (char**)malloc(sizeof(char*) * 2);
								pcAttrValue[0] = _strdup(parentLine[0].c_str());
								pcAttrValue[1] = _strdup(parentLine[2].c_str());
								

								iStatus = ITEM_create_item2(parentLine[1].c_str(),2,pcAttrName,pcAttrValue,NULL,&parentItemTag,&parentRevTag);

								/** /
								if(pcAttrName){
										MEM_free(pcAttrName);
								}
								if(pcAttrValue){
									SAFE_SM_FREE(pcAttrValue);
								}
								/**/

								AOM_save(parentItemTag);
								AOM_save(parentRevTag);

								

								//iStatus = EPM_find_process_template("HLT_Release_Wokflow",&process_template);
								//iStatus = EPM_create_process(parentLine[1].c_str(),"",process_template,1,&parentRevTag,&attachTypes,&process);
							}


							/*Child Item*/
							std::vector<string> childLine = splitString(childItem,"~",false);
							iCount = 0;
							mdtTag = NULLTAG;
							tcQueryMap.clear();

							/*Search Child Item*/
							/*QUERY MAP TO FIND 'Parent Item ID' */
							tcQueryMap.insert(::make_pair((string)ITEM_ID,(string)childLine[0]));
							tcQueryMap.insert(::make_pair((string)OBJECT_TYPE,(string)childLine[1]));
				
							iStatus = find_execute_qry(QUERYITEM,tcQueryMap,&iCount,&mdtTag);

							if(iCount > 0 )
							{
									childItemTag = mdtTag[0];
									iStatus = ITEM_ask_latest_rev(childItemTag,&childRevTag);
							}
							else 
							{
								char* pcAttrName[] = {"item_id","object_desc"};
								char** pcAttrValue = NULL;
								pcAttrValue = (char**)malloc(sizeof(char*) * 2);
								pcAttrValue[0] = _strdup(childLine[0].c_str());
								pcAttrValue[1] = _strdup(childLine[2].c_str());
								
								iStatus = ITEM_create_item2(childLine[1].c_str(),2,pcAttrName,pcAttrValue,NULL,&childItemTag,&childRevTag);	
							
								AOM_save(childItemTag);
								AOM_save(childRevTag);
								/*Attach MSwordX Dataset to Child Rev*/
							if(!datasetItem.empty() || datasetItem.length() > 0){
								std::vector<string> datasetLine = splitString(datasetItem,"~",false);
								create_and_attach_dataset(childRevTag, datasetLine[2], datasetLine[1], datasetLine[0]);
								AOM_save(childRevTag);
							}
							
							/*Attach JPEG Dataset to Child Rev*/
							if(!datasetItem1.empty() || datasetItem1.length() > 0){
								std::vector<string> datasetLine1 = splitString(datasetItem1,"~",false);
								create_and_attach_dataset(childRevTag, datasetLine1[2], datasetLine1[1], datasetLine1[0]);
								AOM_save(childRevTag);
							}
								/*Memory freed* /

								if(pcAttrName){
										MEM_free(pcAttrName);
								}
								if(pcAttrValue){
								SAFE_SM_FREE(pcAttrValue);
								}
								*/
							}

							

							/* Update Child Item Table Attributes */
							if(!childAttr.empty() || childAttr.length() > 0){
								std::vector<string> tableLine = splitString(childAttr,"~",false);
								update_Table_Attributes(childRevTag, tableLine);
								AOM_save(childRevTag);
							}
                            
								//iStatus = EPM_find_process_template("HLT_Release_Wokflow",&process_template);
								//iStatus = EPM_create_process(childLine[1].c_str(),"",process_template,1,&childRevTag,&attachTypes,&process);
								
							iStatus=WSOM_ask_release_status_list(parentRevTag,&status_count,&status);
                            
							/*BOM View Creation*/
							if(status_count<1){


							int icntBv = 0;
							int icntBvr	 = 0;
							int bomlineItemRevAttr = 0;

							tag_t tBomWindow			= NULLTAG;
							tag_t tBOMTopLine			= NULLTAG;
							tag_t tchildBOMLine			= NULLTAG;
							tag_t tBomView				= NULLTAG;
							tag_t tBomViewRevision		= NULLTAG;
							tag_t* tBvTag				= NULLTAG;
							tag_t* tbvrTag				= NULLTAG;
							tag_t* tOccsTag				= NULLTAG;
							


							BOM_create_window(&tBomWindow);

							BOM_set_window_top_line(tBomWindow,NULLTAG,parentRevTag,NULLTAG,&tBOMTopLine);

							ITEM_list_bom_views(parentItemTag,&icntBv,&tBvTag);
							
							if(icntBv > 0){
								tBomView = tBvTag[0];
							}
							else
							{
								PS_create_bom_view(NULLTAG,"","",parentItemTag,&tBomView);

								AOM_save(tBomView);
								AOM_save(parentItemTag);
							}

							ITEM_rev_list_bom_view_revs( parentRevTag, &icntBvr, &tbvrTag);

							if(icntBvr > 0)
							{
								tBomViewRevision = tbvrTag[0];
							}
							else{
								PS_create_bvr(tBomView,"","", false, parentRevTag,&tBomViewRevision);
							}

							AOM_save(tBomViewRevision);
							AOM_save(parentRevTag);

							BOM_line_add(tBOMTopLine,childItemTag,childRevTag,NULLTAG,&tchildBOMLine);
							
							BOM_line_look_up_attribute("bl_sequence_no", &bomlineItemRevAttr);
							iStatus = BOM_line_set_attribute_string(tchildBOMLine, bomlineItemRevAttr, childLine[3].c_str());
							

							BOM_save_window(tBomWindow);

							BOM_close_window(tBomWindow);

							}
						}
						else
							errorLog = "Line contains More than one Parent child spliter '|' ";
					}

					line="";
				}
			}
			catch(...)
			{
				fInputFile.close();
			}
			fInputFile.close();

			iStatus = INZ_Release_Template("HLT_Root");
		}
	}
	ITK_exit_module(true);
	return 0;
}

int INZ_Release_Template(char * cRootID)
{
	int iStatus = 0;
	int count = 0;
	int attachTypes = EPM_target_attachment;
	int stat_count;
	tag_t tRootItem = NULLTAG,
		  tRootItemRevision = NULLTAG,
		  view_type= NULLTAG,
		  t_bv = NULLTAG,
		  t_window = NULLTAG,
		  process = NULLTAG,
		  process_template = NULLTAG,
		  *status_list=NULLTAG,
		  top_line = NULLTAG;
	    iStatus = ITEM_find_item(cRootID, &tRootItem);					//printf("\n(%d)Found Item",result);
		iStatus = ITEM_ask_latest_rev(tRootItem, &tRootItemRevision);			//Get latest revision tag of the item
		iStatus= WSOM_ask_release_status_list(tRootItemRevision,&stat_count,&status_list);
		if(stat_count<1){
		iStatus = PS_find_view_type("view", &view_type);				//Get tag of particular BOM VIEW TYPE
		count++;
		iStatus = ITEM_rev_ask_gde_bvr(tRootItemRevision, view_type, &t_bv);	//Get BOM view of above type for the latest revision of the item

		iStatus = BOM_create_window(&t_window);					//Create a new PSE window.	printf("\n(%d)Window Created",result);
		iStatus = BOM_set_window_top_line(t_window, tRootItem, NULLTAG, t_bv, &top_line);	//Set the above bom view as the top line.
		printf("\n(%d)Top line set.\n",iStatus);
		
		INZ_ReleaseChildLines(top_line);											//Calling function to list the bomlines
		}
		//iStatus = EPM_find_process_template("HLT_Release_Wokflow",&process_template);
		//iStatus = EPM_create_process(cRootID ,"",process_template,1,&tRootItemRevision,&attachTypes,&process);
		return 0;
}





void INZ_ReleaseChildLines(tag_t top_line)
{
	int i=0, n=0, attr=0, result=0;
	int attachTypes = EPM_target_attachment;
	char *c_name = NULL, tab1[30];
	tag_t * t_child_boms=NULLTAG, c_name_tag=NULLTAG, rv_tag=NULLTAG,
		   process = NULLTAG,
		   process_template = NULLTAG;

	result = BOM_line_look_up_attribute("bl_revision", &attr);			//getting the attribute no. of bl_revision
	result = BOM_line_ask_attribute_tag(top_line, attr, &rv_tag);		//getting the revision tag from the attrib no.
	result = EPM_find_process_template("HLT_Release_Wokflow",&process_template);
	
	result = ITEM_ask_item_of_rev(rv_tag, &c_name_tag);					//getting the item of the revision.
	result = WSOM_ask_name2(c_name_tag, &c_name);							//getting the name of the item.
	result = EPM_create_process(c_name ,"",process_template,1,&rv_tag,&attachTypes,&process);
	printf("%s\n", c_name);
	
	result = BOM_line_ask_all_child_lines(top_line, &n, &t_child_boms);		//getting child bomlines of a top bomline.
	if (n!=0)
	{
		
		for(i=0;i<n;i++)
			INZ_ReleaseChildLines(t_child_boms[i]);								//calling itself with the current bomline as topline and its children.
	}
	
}

/**************************************************************************************************
*    Function Name       :update_Table_Attributes
*    Description         :This function will update Attributes to Table Revisions
*    REQUIRED HEADERS    :rane_common.h
*    INPUT/OUTPUT PARAMS : 
*
*   RETURN VALUE         :	iStatus.
*   GLOBALS USED         :  None
*   FUNCTIONS CALLED     :  None
*   ALGORITHM            :  
*******************************************************************************************************/
int update_Table_Attributes(tag_t childRevTag, std::vector<string> tableLine)
{

	int iStatus = 0,
		iCnt    = 0;

	iStatus = AOM_refresh(childRevTag,TRUE);
	
	for(iCnt=0;iCnt<tableLine.size();iCnt++)
	{

		std::vector<string> attrNameValPair = splitString(tableLine[iCnt],":",false);
		if(tc_strcmp(attrNameValPair[0].c_str(),"m2_Reference_Data")!= 0)
		{
		   iStatus = AOM_set_value_string(childRevTag,attrNameValPair[0].c_str(),attrNameValPair[1].c_str());
		   iStatus = AOM_save(childRevTag);
		}
		else{
			std::vector<string> iMageValuePair = splitString(attrNameValPair[1],",",false);
			for(int i =0 ;i<iMageValuePair.size();i++){
				iStatus = AOM_set_value_string_at(childRevTag,attrNameValPair[0].c_str(),i,iMageValuePair[i].c_str());
			}
			iStatus = AOM_save(childRevTag);
		}
		
	}
	
	
	iStatus = AOM_refresh(childRevTag,FALSE);
	return iStatus;
}

/**************************************************************************************************
*    Function Name       :find_execute_qry
*    Description         :This function will EXECUTE QUERY BASED on Entries and values passed by function
*    REQUIRED HEADERS    :rane_common.h
*    INPUT/OUTPUT PARAMS : 
*
*   RETURN VALUE         :	tag_t  returnTag:tag of result .
*   GLOBALS USED         :  None
*   FUNCTIONS CALLED     :  None
*   ALGORITHM            :  
*******************************************************************************************************/
int find_execute_qry(char *pcQueryName, std::map<string,string> strQryEntriesMap, int* count,tag_t** ptLatestRev)
{
    int iStatus			= ITK_ok;
	int iTypesize		= 0;
	int iAttrCount		= 0;

	tag_t tQuery		= NULLTAG;

   try {
		*count = 0;
		*ptLatestRev = NULL;
		iStatus = QRY_find2(pcQueryName, &tQuery);   
		if(tQuery != NULLTAG)
		{
			char** pcEntries = NULL;
			char** pcValues = NULL;

			iTypesize = (int)strQryEntriesMap.size();
			//Allocate memory to query entries and values
			pcEntries = (char**)MEM_alloc(iTypesize*sizeof(char*));
			pcValues = (char**)MEM_alloc(iTypesize*sizeof(char*));
			for ( map<string, string>::iterator it = strQryEntriesMap.begin( ); it != strQryEntriesMap.end( ); it++ )
			{		
				pcEntries[iAttrCount] = (char*)MEM_alloc((int)((strlen(it->first.c_str()) +1)*sizeof(char)));			
				pcValues[iAttrCount] = (char*)MEM_alloc((int)((strlen(it->second.c_str()) +1)*sizeof (char)));
		        tc_strcpy(pcEntries[iAttrCount], it->first.c_str());
				tc_strcpy(pcValues[iAttrCount], it->second.c_str());
				iAttrCount++;
			}						

			//Execute query
			iStatus = QRY_execute(tQuery, iAttrCount, pcEntries, pcValues, count, ptLatestRev);

			for (int i=0; i<iTypesize; i++ )
			{
				MEM_free(pcEntries[i]);
				MEM_free(pcValues[i]);
			}
			MEM_free(pcEntries);
			MEM_free(pcValues);
		}
    }
	catch(...)
    {
		if(iStatus == ITK_ok)
		{
			/**Unknow error*/
		}
    }
    
    return iStatus;
}

/***************************************************************************************
*   Function Name       : splitString
*   Description         : This function splits the given string by a given delimiter.
*   REQUIRED HEADERS    : 
*                         
*   INPUT/OUTPUT PARAMS : string theString
*                         char delim
*
*   RETURN VALUE        : vector of elements
*                        
*   GLOBALS USED        :None
*   FUNCTIONS CALLED    :
*
*   ALGORITHM           :
*
*********************************************************************************************/
std::vector<std::string> splitString(std::string theString, string delim, bool splitQuotes) 
{
    std::vector<std::string> elems;
	std::string quotedDelim = "\"" + delim;
	std::string replaceStr = "#~#";
	std::string searchStr = "";
	char quotes = '"';

	if(splitQuotes)
	{
		if( theString != "" && theString.length() > 0 )
		{
			size_t it = 0;
			while(it != string::npos && it < theString.length())
			{
				if(it == 0)
				{
					if(quotes == theString[0])
					{
						it = theString.find(quotedDelim);
						searchStr = quotedDelim;
					}
					else
					{
						it = theString.find(delim);
						searchStr = delim;
					}
				}
				else
				{
					if(theString[it] == quotes)
					{
						theString.replace(it, 1, "");
						it = theString.find(quotedDelim,it);
						searchStr = quotedDelim;
					}
					else
					{
						it = theString.find(delim,it);
						searchStr = delim;
					}
				}

				if(it != string::npos)
				{
					theString.replace(it, searchStr.length(), replaceStr);
					it += replaceStr.length();
				}
			}

			if(theString[0] == quotes)
			{
				theString.replace(0,1,"");
			}
			size_t strLen = theString.length() - 1;
			if(theString[strLen] == quotes)
			{
				theString.replace(strLen, 1, "");
			}
		}

		delim = "#~#";
	}

	auto start = 0U;
    auto end = theString.find(delim);
    while (end != std::string::npos)
    {
		elems.push_back( theString.substr(start, end - start) );
        start = (int)(end + delim.length());
        end = theString.find(delim, start);
    }
	elems.push_back(theString.substr(start, end));
    return elems;
}
/*******************************************************************************
 * Function Name			: create_and_attach_dataset
 * Description				: Creates dataset and attaches the named reference to it
 *
 * REQUIRED HEADERS :
 * INPUT/OUTPUT PARAMS      : tRev   (I)	- Revision tag_t
 *							  strOSFilePath  (I)      - OS file path string
 *							  strDatasetType  (I)      - Dataset type string
 *							: strDatasetName (I)     -  Dataset name string
 * RETURN VALUE				: int : 0/error code
 * GLOBALS USED				:
 * FUNCTIONS CALLED			:
 * ALGORITHM				: 
 * NOTES					:
 ******************************************************************************/
int create_and_attach_dataset(tag_t tRev, string strOSFilePath, string strDatasetType, string strDatasetName)
{
	int iStatus	= ITK_ok;


	try
	{
		tag_t tDatasetRel					= NULLTAG;
		bool bIsDatasetExist				= false;
		tag_t tNewFile						= NULLTAG;
		
		tag_t tDatasetType					= NULLTAG;
		tag_t tCreatedDataset				= NULLTAG;
		tag_t tDatasetTool					= NULLTAG;
		char *pcDatasetFormat				= NULL;
		tag_t tRelation						= NULLTAG;
		char* pcRefName						= NULL;
		tag_t tRefObj						= NULLTAG;
		string msword                       = "MSWordX";
		string jpeg                         = "JPEG";
		AE_reference_type_t targetRefType	= AE_ASSOCIATION; 

		
		if(tRev != NULLTAG) 
		{
			//check whether the dataset already exists
			iStatus = GRM_find_relation_type( "IMAN_specification", &tDatasetRel );			
			//create the dataset and attach a named reference
			if(strDatasetType==msword){
			iStatus = create_dataset( strDatasetType.c_str(), strDatasetName.c_str(), TEXT_FORMATTYPE, &tCreatedDataset );

			}
			if(strDatasetType==jpeg){
				iStatus = create_dataset( strDatasetType.c_str(), strDatasetName.c_str(), BINARY_REF, &tCreatedDataset );

			}
			if(tCreatedDataset != NULLTAG) 
			{
				//adding dataset named refs
				if(strDatasetType==msword){
				iStatus =	add_dataset_named_ref( strOSFilePath, SS_BINARY, tCreatedDataset, MSWORDX );

				}

				if(strDatasetType==jpeg){
                iStatus =	add_dataset_named_ref( strOSFilePath, SS_BINARY, tCreatedDataset, JPEG );
					
				}
				if(tDatasetRel != NULLTAG)
				{
					iStatus = GRM_create_relation( tRev, tCreatedDataset, tDatasetRel, NULLTAG, &tRelation );
							
					iStatus = GRM_save_relation( tRelation );
							
				}				
			}		
		}
		
	}
	catch(...)
	{
		if(iStatus == ITK_ok)
		{
			/*unknown error*/
		}
	}

	
	return iStatus;
}
/*******************************************************************************
 * Function Name			: Create_dataset
 * Description				: Creates Dataset
 *
 * REQUIRED HEADERS :
 * INPUT/OUTPUT PARAMS      : pcDatasetType   (I)	- dataset type const char*
 *							  pcDatasetName  (I)      - Dataset name const char*
 *							  pcFormatName  (I)      - format name const char*
 *							  tCreatedDataset (O)	- Created dataset tag_t*
 * RETURN VALUE				: int : 0/error code
 * GLOBALS USED				:
 * FUNCTIONS CALLED			:
 * ALGORITHM				: 
 * NOTES					:
 ******************************************************************************/
int create_dataset( const char* pcDatasetType, const char* pcDatasetName, const char* pcFormatName, tag_t *tCreatedDataset)
{
	int iStatus	= ITK_ok;

	try
	{
		tag_t tDatasetType		= NULLTAG;
		tag_t tDatasetTool		= NULLTAG;

		iStatus = AE_find_datasettype2( pcDatasetType, &tDatasetType );
		
		if(tDatasetType != NULLTAG) 
		{
			//Creates the dataset
			iStatus = AE_create_dataset_with_id( tDatasetType, pcDatasetName, NULL, NULL, NULL, tCreatedDataset );
			
			//Gets and sets the dataset tool
			iStatus = AE_ask_datasettype_def_tool( tDatasetType, &tDatasetTool );
			
			if(tCreatedDataset != NULLTAG) 
			{
				iStatus = AE_set_dataset_format2( *tCreatedDataset, pcFormatName );
				

				iStatus = AE_set_dataset_tool( *tCreatedDataset, tDatasetTool );
				

				iStatus = AOM_save( *tCreatedDataset );
				
			}
		}
	}
	catch(...)
	{
		if(iStatus == ITK_ok)
		{
			/*unknown error*/
		}
	}
	
	return iStatus;
}

/*******************************************************************************
 * Function Name			: add_dataset_named_ref
 * Description				: Add named reference to the dataset
 *
 * REQUIRED HEADERS :
 * INPUT/OUTPUT PARAMS      : strOSFilePath   (I)	- os file path string
 *							  iFileType  (I)      - file type int
 *							  tDataset  (I)      - dataset object tag_t
 *							  pcRefName	(I)		- reference name const char*
 * RETURN VALUE				: int : 0/error code
 * GLOBALS USED				:
 * FUNCTIONS CALLED			:
 * ALGORITHM				: 
 * NOTES					:
 ******************************************************************************/

int add_dataset_named_ref( string strOSFilePath, int iFileType, tag_t tDataset, const char* pcRefName)
{
	int iStatus	= ITK_ok;
	
	try
	{
		tag_t tNewFile			= NULLTAG;
		IMF_file_t fileDescp;

		cout<<strOSFilePath<<endl;

		iStatus = IMF_import_file( strOSFilePath.c_str(), NULL, iFileType, &tNewFile, &fileDescp );
		
		iStatus = IMF_close_file( fileDescp );
		
		iStatus = AOM_save( tNewFile );
		
		iStatus = AOM_refresh( tDataset, true );
		
		iStatus = AE_add_dataset_named_ref2( tDataset, pcRefName, AE_ASSOCIATION, tNewFile );
		
		iStatus = AOM_save( tDataset );
		
		iStatus = AOM_refresh( tDataset, false );
	}
	catch(...)
	{
		/**/
	}
	
	return iStatus;
}